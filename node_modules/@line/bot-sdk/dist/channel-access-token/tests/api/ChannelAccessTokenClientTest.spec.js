"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../api");
const node_http_1 = require("node:http");
const node_assert_1 = require("node:assert");
const pkg = require("../../../../package.json");
const channel_access_token = "test_channel_access_token";
describe("ChannelAccessTokenClient", () => {
    it("getsAllValidChannelAccessTokenKeyIdsWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/oauth2/v2.1/tokens/kid"
                .replace("{clientAssertionType}", "DUMMY") // string
                .replace("{clientAssertion}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("clientAssertionType"), String(
            // clientAssertionType: string
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("clientAssertion"), String(
            // clientAssertion: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getsAllValidChannelAccessTokenKeyIdsWithHttpInfo(
        // clientAssertionType: string
        "DUMMY", // paramName=clientAssertionType(enum)
        // clientAssertion: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getsAllValidChannelAccessTokenKeyIds", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/oauth2/v2.1/tokens/kid"
                .replace("{clientAssertionType}", "DUMMY") // string
                .replace("{clientAssertion}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("clientAssertionType"), String(
            // clientAssertionType: string
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("clientAssertion"), String(
            // clientAssertion: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getsAllValidChannelAccessTokenKeyIds(
        // clientAssertionType: string
        "DUMMY", // paramName=clientAssertionType(enum)
        // clientAssertion: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("issueChannelTokenWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/oauth/accessToken"
                .replace("{grantType}", "DUMMY") // string
                .replace("{clientId}", "DUMMY") // string
                .replace("{clientSecret}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.issueChannelTokenWithHttpInfo(
        // grantType: string
        "DUMMY", // grantType(string)
        // clientId: string
        "DUMMY", // clientId(string)
        // clientSecret: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("issueChannelToken", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/oauth/accessToken"
                .replace("{grantType}", "DUMMY") // string
                .replace("{clientId}", "DUMMY") // string
                .replace("{clientSecret}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.issueChannelToken(
        // grantType: string
        "DUMMY", // grantType(string)
        // clientId: string
        "DUMMY", // clientId(string)
        // clientSecret: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("issueChannelTokenByJWTWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/oauth2/v2.1/token"
                .replace("{grantType}", "DUMMY") // string
                .replace("{clientAssertionType}", "DUMMY") // string
                .replace("{clientAssertion}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.issueChannelTokenByJWTWithHttpInfo(
        // grantType: string
        "DUMMY", // grantType(string)
        // clientAssertionType: string
        "DUMMY", // clientAssertionType(string)
        // clientAssertion: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("issueChannelTokenByJWT", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/oauth2/v2.1/token"
                .replace("{grantType}", "DUMMY") // string
                .replace("{clientAssertionType}", "DUMMY") // string
                .replace("{clientAssertion}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.issueChannelTokenByJWT(
        // grantType: string
        "DUMMY", // grantType(string)
        // clientAssertionType: string
        "DUMMY", // clientAssertionType(string)
        // clientAssertion: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("issueStatelessChannelTokenWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/oauth2/v3/token"
                .replace("{grantType}", "DUMMY") // string
                .replace("{clientAssertionType}", "DUMMY") // string
                .replace("{clientAssertion}", "DUMMY") // string
                .replace("{clientId}", "DUMMY") // string
                .replace("{clientSecret}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.issueStatelessChannelTokenWithHttpInfo(
        // grantType: string
        "DUMMY", // paramName=grantType(enum)
        // clientAssertionType: string
        "DUMMY", // paramName=clientAssertionType(enum)
        // clientAssertion: string
        "DUMMY", // clientAssertion(string)
        // clientId: string
        "DUMMY", // clientId(string)
        // clientSecret: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("issueStatelessChannelToken", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/oauth2/v3/token"
                .replace("{grantType}", "DUMMY") // string
                .replace("{clientAssertionType}", "DUMMY") // string
                .replace("{clientAssertion}", "DUMMY") // string
                .replace("{clientId}", "DUMMY") // string
                .replace("{clientSecret}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.issueStatelessChannelToken(
        // grantType: string
        "DUMMY", // paramName=grantType(enum)
        // clientAssertionType: string
        "DUMMY", // paramName=clientAssertionType(enum)
        // clientAssertion: string
        "DUMMY", // clientAssertion(string)
        // clientId: string
        "DUMMY", // clientId(string)
        // clientSecret: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("revokeChannelTokenWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/oauth/revoke".replace("{accessToken}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.revokeChannelTokenWithHttpInfo(
        // accessToken: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("revokeChannelToken", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/oauth/revoke".replace("{accessToken}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.revokeChannelToken(
        // accessToken: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("revokeChannelTokenByJWTWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/oauth2/v2.1/revoke"
                .replace("{clientId}", "DUMMY") // string
                .replace("{clientSecret}", "DUMMY") // string
                .replace("{accessToken}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.revokeChannelTokenByJWTWithHttpInfo(
        // clientId: string
        "DUMMY", // clientId(string)
        // clientSecret: string
        "DUMMY", // clientSecret(string)
        // accessToken: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("revokeChannelTokenByJWT", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/oauth2/v2.1/revoke"
                .replace("{clientId}", "DUMMY") // string
                .replace("{clientSecret}", "DUMMY") // string
                .replace("{accessToken}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.revokeChannelTokenByJWT(
        // clientId: string
        "DUMMY", // clientId(string)
        // clientSecret: string
        "DUMMY", // clientSecret(string)
        // accessToken: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("verifyChannelTokenWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/oauth/verify".replace("{accessToken}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.verifyChannelTokenWithHttpInfo(
        // accessToken: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("verifyChannelToken", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/oauth/verify".replace("{accessToken}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.verifyChannelToken(
        // accessToken: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("verifyChannelTokenByJWTWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/oauth2/v2.1/verify".replace("{accessToken}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("accessToken"), String(
            // accessToken: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.verifyChannelTokenByJWTWithHttpInfo(
        // accessToken: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("verifyChannelTokenByJWT", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/oauth2/v2.1/verify".replace("{accessToken}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("accessToken"), String(
            // accessToken: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ChannelAccessTokenClient({
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.verifyChannelTokenByJWT(
        // accessToken: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
});
