"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../api");
const node_http_1 = require("node:http");
const node_assert_1 = require("node:assert");
const pkg = require("../../../../package.json");
const channel_access_token = "test_channel_access_token";
describe("MessagingApiClient", () => {
    it("audienceMatchWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/bot/ad/multicast/phone");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.audienceMatchWithHttpInfo(
        // audienceMatchMessagesRequest: AudienceMatchMessagesRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("audienceMatch", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/bot/ad/multicast/phone");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.audienceMatch(
        // audienceMatchMessagesRequest: AudienceMatchMessagesRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("broadcastWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/broadcast".replace("{xLineRetryKey}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.broadcastWithHttpInfo(
        // broadcastRequest: BroadcastRequest
        {}, // paramName=broadcastRequest
        // xLineRetryKey: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("broadcast", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/broadcast".replace("{xLineRetryKey}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.broadcast(
        // broadcastRequest: BroadcastRequest
        {}, // paramName=broadcastRequest
        // xLineRetryKey: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("cancelDefaultRichMenuWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "DELETE");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/user/all/richmenu");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.cancelDefaultRichMenuWithHttpInfo();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("cancelDefaultRichMenu", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "DELETE");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/user/all/richmenu");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.cancelDefaultRichMenu();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("createRichMenuWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.createRichMenuWithHttpInfo(
        // richMenuRequest: RichMenuRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("createRichMenu", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.createRichMenu(
        // richMenuRequest: RichMenuRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("createRichMenuAliasWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/alias");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.createRichMenuAliasWithHttpInfo(
        // createRichMenuAliasRequest: CreateRichMenuAliasRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("createRichMenuAlias", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/alias");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.createRichMenuAlias(
        // createRichMenuAliasRequest: CreateRichMenuAliasRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("deleteRichMenuWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "DELETE");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/{richMenuId}".replace("{richMenuId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.deleteRichMenuWithHttpInfo(
        // richMenuId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("deleteRichMenu", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "DELETE");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/{richMenuId}".replace("{richMenuId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.deleteRichMenu(
        // richMenuId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("deleteRichMenuAliasWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "DELETE");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/alias/{richMenuAliasId}".replace("{richMenuAliasId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.deleteRichMenuAliasWithHttpInfo(
        // richMenuAliasId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("deleteRichMenuAlias", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "DELETE");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/alias/{richMenuAliasId}".replace("{richMenuAliasId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.deleteRichMenuAlias(
        // richMenuAliasId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getAdPhoneMessageStatisticsWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/delivery/ad_phone".replace("{date}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("date"), String(
            // date: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getAdPhoneMessageStatisticsWithHttpInfo(
        // date: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getAdPhoneMessageStatistics", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/delivery/ad_phone".replace("{date}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("date"), String(
            // date: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getAdPhoneMessageStatistics(
        // date: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getAggregationUnitNameListWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/aggregation/list"
                .replace("{limit}", "DUMMY") // string
                .replace("{start}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("limit"), String(
            // limit: string
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("start"), String(
            // start: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getAggregationUnitNameListWithHttpInfo(
        // limit: string
        "DUMMY", // paramName=limit(enum)
        // start: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getAggregationUnitNameList", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/aggregation/list"
                .replace("{limit}", "DUMMY") // string
                .replace("{start}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("limit"), String(
            // limit: string
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("start"), String(
            // start: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getAggregationUnitNameList(
        // limit: string
        "DUMMY", // paramName=limit(enum)
        // start: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getAggregationUnitUsageWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/aggregation/info");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getAggregationUnitUsageWithHttpInfo();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getAggregationUnitUsage", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/aggregation/info");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getAggregationUnitUsage();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getBotInfoWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/info");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getBotInfoWithHttpInfo();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getBotInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/info");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getBotInfo();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getDefaultRichMenuIdWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/user/all/richmenu");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getDefaultRichMenuIdWithHttpInfo();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getDefaultRichMenuId", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/user/all/richmenu");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getDefaultRichMenuId();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getFollowersWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/followers/ids"
                .replace("{start}", "DUMMY") // string
                .replace("{limit}", "0"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("start"), String(
            // start: string
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("limit"), String(
            // limit: number
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getFollowersWithHttpInfo(
        // start: string
        "DUMMY", // paramName=start(enum)
        // limit: number
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getFollowers", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/followers/ids"
                .replace("{start}", "DUMMY") // string
                .replace("{limit}", "0"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("start"), String(
            // start: string
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("limit"), String(
            // limit: number
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getFollowers(
        // start: string
        "DUMMY", // paramName=start(enum)
        // limit: number
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getGroupMemberCountWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/group/{groupId}/members/count".replace("{groupId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getGroupMemberCountWithHttpInfo(
        // groupId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getGroupMemberCount", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/group/{groupId}/members/count".replace("{groupId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getGroupMemberCount(
        // groupId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getGroupMemberProfileWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/group/{groupId}/member/{userId}"
                .replace("{groupId}", "DUMMY") // string
                .replace("{userId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getGroupMemberProfileWithHttpInfo(
        // groupId: string
        "DUMMY", // groupId(string)
        // userId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getGroupMemberProfile", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/group/{groupId}/member/{userId}"
                .replace("{groupId}", "DUMMY") // string
                .replace("{userId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getGroupMemberProfile(
        // groupId: string
        "DUMMY", // groupId(string)
        // userId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getGroupMembersIdsWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/group/{groupId}/members/ids"
                .replace("{groupId}", "DUMMY") // string
                .replace("{start}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("start"), String(
            // start: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getGroupMembersIdsWithHttpInfo(
        // groupId: string
        "DUMMY", // groupId(string)
        // start: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getGroupMembersIds", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/group/{groupId}/members/ids"
                .replace("{groupId}", "DUMMY") // string
                .replace("{start}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("start"), String(
            // start: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getGroupMembersIds(
        // groupId: string
        "DUMMY", // groupId(string)
        // start: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getGroupSummaryWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/group/{groupId}/summary".replace("{groupId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getGroupSummaryWithHttpInfo(
        // groupId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getGroupSummary", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/group/{groupId}/summary".replace("{groupId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getGroupSummary(
        // groupId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getMessageQuotaWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/quota");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getMessageQuotaWithHttpInfo();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getMessageQuota", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/quota");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getMessageQuota();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getMessageQuotaConsumptionWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/quota/consumption");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getMessageQuotaConsumptionWithHttpInfo();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getMessageQuotaConsumption", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/quota/consumption");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getMessageQuotaConsumption();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getNarrowcastProgressWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/progress/narrowcast".replace("{requestId}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("requestId"), String(
            // requestId: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getNarrowcastProgressWithHttpInfo(
        // requestId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getNarrowcastProgress", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/progress/narrowcast".replace("{requestId}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("requestId"), String(
            // requestId: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getNarrowcastProgress(
        // requestId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getNumberOfSentBroadcastMessagesWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/delivery/broadcast".replace("{date}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("date"), String(
            // date: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getNumberOfSentBroadcastMessagesWithHttpInfo(
        // date: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getNumberOfSentBroadcastMessages", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/delivery/broadcast".replace("{date}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("date"), String(
            // date: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getNumberOfSentBroadcastMessages(
        // date: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getNumberOfSentMulticastMessagesWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/delivery/multicast".replace("{date}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("date"), String(
            // date: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getNumberOfSentMulticastMessagesWithHttpInfo(
        // date: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getNumberOfSentMulticastMessages", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/delivery/multicast".replace("{date}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("date"), String(
            // date: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getNumberOfSentMulticastMessages(
        // date: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getNumberOfSentPushMessagesWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/delivery/push".replace("{date}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("date"), String(
            // date: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getNumberOfSentPushMessagesWithHttpInfo(
        // date: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getNumberOfSentPushMessages", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/delivery/push".replace("{date}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("date"), String(
            // date: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getNumberOfSentPushMessages(
        // date: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getNumberOfSentReplyMessagesWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/delivery/reply".replace("{date}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("date"), String(
            // date: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getNumberOfSentReplyMessagesWithHttpInfo(
        // date: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getNumberOfSentReplyMessages", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/delivery/reply".replace("{date}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("date"), String(
            // date: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getNumberOfSentReplyMessages(
        // date: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getPNPMessageStatisticsWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/delivery/pnp".replace("{date}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("date"), String(
            // date: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getPNPMessageStatisticsWithHttpInfo(
        // date: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getPNPMessageStatistics", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/delivery/pnp".replace("{date}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("date"), String(
            // date: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getPNPMessageStatistics(
        // date: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getProfileWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/profile/{userId}".replace("{userId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getProfileWithHttpInfo(
        // userId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getProfile", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/profile/{userId}".replace("{userId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getProfile(
        // userId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRichMenuWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/{richMenuId}".replace("{richMenuId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRichMenuWithHttpInfo(
        // richMenuId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRichMenu", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/{richMenuId}".replace("{richMenuId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRichMenu(
        // richMenuId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRichMenuAliasWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/alias/{richMenuAliasId}".replace("{richMenuAliasId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRichMenuAliasWithHttpInfo(
        // richMenuAliasId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRichMenuAlias", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/alias/{richMenuAliasId}".replace("{richMenuAliasId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRichMenuAlias(
        // richMenuAliasId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRichMenuAliasListWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/alias/list");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRichMenuAliasListWithHttpInfo();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRichMenuAliasList", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/alias/list");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRichMenuAliasList();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRichMenuBatchProgressWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/progress/batch".replace("{requestId}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("requestId"), String(
            // requestId: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRichMenuBatchProgressWithHttpInfo(
        // requestId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRichMenuBatchProgress", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/progress/batch".replace("{requestId}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("requestId"), String(
            // requestId: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRichMenuBatchProgress(
        // requestId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRichMenuIdOfUserWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/user/{userId}/richmenu".replace("{userId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRichMenuIdOfUserWithHttpInfo(
        // userId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRichMenuIdOfUser", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/user/{userId}/richmenu".replace("{userId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRichMenuIdOfUser(
        // userId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRichMenuListWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/list");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRichMenuListWithHttpInfo();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRichMenuList", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/list");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRichMenuList();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRoomMemberCountWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/room/{roomId}/members/count".replace("{roomId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRoomMemberCountWithHttpInfo(
        // roomId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRoomMemberCount", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/room/{roomId}/members/count".replace("{roomId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRoomMemberCount(
        // roomId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRoomMemberProfileWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/room/{roomId}/member/{userId}"
                .replace("{roomId}", "DUMMY") // string
                .replace("{userId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRoomMemberProfileWithHttpInfo(
        // roomId: string
        "DUMMY", // roomId(string)
        // userId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRoomMemberProfile", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/room/{roomId}/member/{userId}"
                .replace("{roomId}", "DUMMY") // string
                .replace("{userId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRoomMemberProfile(
        // roomId: string
        "DUMMY", // roomId(string)
        // userId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRoomMembersIdsWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/room/{roomId}/members/ids"
                .replace("{roomId}", "DUMMY") // string
                .replace("{start}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("start"), String(
            // start: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRoomMembersIdsWithHttpInfo(
        // roomId: string
        "DUMMY", // roomId(string)
        // start: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getRoomMembersIds", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/room/{roomId}/members/ids"
                .replace("{roomId}", "DUMMY") // string
                .replace("{start}", "DUMMY"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("start"), String(
            // start: string
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getRoomMembersIds(
        // roomId: string
        "DUMMY", // roomId(string)
        // start: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getWebhookEndpointWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/channel/webhook/endpoint");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getWebhookEndpointWithHttpInfo();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getWebhookEndpoint", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/channel/webhook/endpoint");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getWebhookEndpoint();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("issueLinkTokenWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/user/{userId}/linkToken".replace("{userId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.issueLinkTokenWithHttpInfo(
        // userId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("issueLinkToken", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/user/{userId}/linkToken".replace("{userId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.issueLinkToken(
        // userId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("leaveGroupWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/group/{groupId}/leave".replace("{groupId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.leaveGroupWithHttpInfo(
        // groupId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("leaveGroup", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/group/{groupId}/leave".replace("{groupId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.leaveGroup(
        // groupId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("leaveRoomWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/room/{roomId}/leave".replace("{roomId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.leaveRoomWithHttpInfo(
        // roomId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("leaveRoom", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/room/{roomId}/leave".replace("{roomId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.leaveRoom(
        // roomId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("linkRichMenuIdToUserWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/user/{userId}/richmenu/{richMenuId}"
                .replace("{userId}", "DUMMY") // string
                .replace("{richMenuId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.linkRichMenuIdToUserWithHttpInfo(
        // userId: string
        "DUMMY", // userId(string)
        // richMenuId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("linkRichMenuIdToUser", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/user/{userId}/richmenu/{richMenuId}"
                .replace("{userId}", "DUMMY") // string
                .replace("{richMenuId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.linkRichMenuIdToUser(
        // userId: string
        "DUMMY", // userId(string)
        // richMenuId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("linkRichMenuIdToUsersWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/bulk/link");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.linkRichMenuIdToUsersWithHttpInfo(
        // richMenuBulkLinkRequest: RichMenuBulkLinkRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("linkRichMenuIdToUsers", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/bulk/link");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.linkRichMenuIdToUsers(
        // richMenuBulkLinkRequest: RichMenuBulkLinkRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("markMessagesAsReadWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/markAsRead");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.markMessagesAsReadWithHttpInfo(
        // markMessagesAsReadRequest: MarkMessagesAsReadRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("markMessagesAsRead", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/markAsRead");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.markMessagesAsRead(
        // markMessagesAsReadRequest: MarkMessagesAsReadRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("multicastWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/multicast".replace("{xLineRetryKey}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.multicastWithHttpInfo(
        // multicastRequest: MulticastRequest
        {}, // paramName=multicastRequest
        // xLineRetryKey: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("multicast", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/multicast".replace("{xLineRetryKey}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.multicast(
        // multicastRequest: MulticastRequest
        {}, // paramName=multicastRequest
        // xLineRetryKey: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("narrowcastWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/narrowcast".replace("{xLineRetryKey}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.narrowcastWithHttpInfo(
        // narrowcastRequest: NarrowcastRequest
        {}, // paramName=narrowcastRequest
        // xLineRetryKey: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("narrowcast", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/narrowcast".replace("{xLineRetryKey}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.narrowcast(
        // narrowcastRequest: NarrowcastRequest
        {}, // paramName=narrowcastRequest
        // xLineRetryKey: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("pushMessageWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/push".replace("{xLineRetryKey}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.pushMessageWithHttpInfo(
        // pushMessageRequest: PushMessageRequest
        {}, // paramName=pushMessageRequest
        // xLineRetryKey: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("pushMessage", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/push".replace("{xLineRetryKey}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.pushMessage(
        // pushMessageRequest: PushMessageRequest
        {}, // paramName=pushMessageRequest
        // xLineRetryKey: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("pushMessagesByPhoneWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/bot/pnp/push".replace("{xLineDeliveryTag}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.pushMessagesByPhoneWithHttpInfo(
        // pnpMessagesRequest: PnpMessagesRequest
        {}, // paramName=pnpMessagesRequest
        // xLineDeliveryTag: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("pushMessagesByPhone", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/bot/pnp/push".replace("{xLineDeliveryTag}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.pushMessagesByPhone(
        // pnpMessagesRequest: PnpMessagesRequest
        {}, // paramName=pnpMessagesRequest
        // xLineDeliveryTag: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("replyMessageWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/reply");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.replyMessageWithHttpInfo(
        // replyMessageRequest: ReplyMessageRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("replyMessage", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/reply");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.replyMessage(
        // replyMessageRequest: ReplyMessageRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("richMenuBatchWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/batch");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.richMenuBatchWithHttpInfo(
        // richMenuBatchRequest: RichMenuBatchRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("richMenuBatch", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/batch");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.richMenuBatch(
        // richMenuBatchRequest: RichMenuBatchRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("setDefaultRichMenuWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/user/all/richmenu/{richMenuId}".replace("{richMenuId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.setDefaultRichMenuWithHttpInfo(
        // richMenuId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("setDefaultRichMenu", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/user/all/richmenu/{richMenuId}".replace("{richMenuId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.setDefaultRichMenu(
        // richMenuId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("setWebhookEndpointWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "PUT");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/channel/webhook/endpoint");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.setWebhookEndpointWithHttpInfo(
        // setWebhookEndpointRequest: SetWebhookEndpointRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("setWebhookEndpoint", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "PUT");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/channel/webhook/endpoint");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.setWebhookEndpoint(
        // setWebhookEndpointRequest: SetWebhookEndpointRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("testWebhookEndpointWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/channel/webhook/test");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.testWebhookEndpointWithHttpInfo(
        // testWebhookEndpointRequest: TestWebhookEndpointRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("testWebhookEndpoint", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/channel/webhook/test");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.testWebhookEndpoint(
        // testWebhookEndpointRequest: TestWebhookEndpointRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("unlinkRichMenuIdFromUserWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "DELETE");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/user/{userId}/richmenu".replace("{userId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.unlinkRichMenuIdFromUserWithHttpInfo(
        // userId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("unlinkRichMenuIdFromUser", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "DELETE");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/user/{userId}/richmenu".replace("{userId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.unlinkRichMenuIdFromUser(
        // userId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("unlinkRichMenuIdFromUsersWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/bulk/unlink");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.unlinkRichMenuIdFromUsersWithHttpInfo(
        // richMenuBulkUnlinkRequest: RichMenuBulkUnlinkRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("unlinkRichMenuIdFromUsers", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/bulk/unlink");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.unlinkRichMenuIdFromUsers(
        // richMenuBulkUnlinkRequest: RichMenuBulkUnlinkRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("updateRichMenuAliasWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/alias/{richMenuAliasId}".replace("{richMenuAliasId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.updateRichMenuAliasWithHttpInfo(
        // richMenuAliasId: string
        "DUMMY", // richMenuAliasId(string)
        // updateRichMenuAliasRequest: UpdateRichMenuAliasRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("updateRichMenuAlias", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/alias/{richMenuAliasId}".replace("{richMenuAliasId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.updateRichMenuAlias(
        // richMenuAliasId: string
        "DUMMY", // richMenuAliasId(string)
        // updateRichMenuAliasRequest: UpdateRichMenuAliasRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("validateBroadcastWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/validate/broadcast");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.validateBroadcastWithHttpInfo(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("validateBroadcast", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/validate/broadcast");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.validateBroadcast(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("validateMulticastWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/validate/multicast");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.validateMulticastWithHttpInfo(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("validateMulticast", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/validate/multicast");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.validateMulticast(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("validateNarrowcastWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/validate/narrowcast");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.validateNarrowcastWithHttpInfo(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("validateNarrowcast", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/validate/narrowcast");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.validateNarrowcast(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("validatePushWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/validate/push");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.validatePushWithHttpInfo(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("validatePush", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/validate/push");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.validatePush(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("validateReplyWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/validate/reply");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.validateReplyWithHttpInfo(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("validateReply", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/message/validate/reply");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.validateReply(
        // validateMessageRequest: ValidateMessageRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("validateRichMenuBatchRequestWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/validate/batch");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.validateRichMenuBatchRequestWithHttpInfo(
        // richMenuBatchRequest: RichMenuBatchRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("validateRichMenuBatchRequest", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/validate/batch");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.validateRichMenuBatchRequest(
        // richMenuBatchRequest: RichMenuBatchRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("validateRichMenuObjectWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/validate");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.validateRichMenuObjectWithHttpInfo(
        // richMenuRequest: RichMenuRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("validateRichMenuObject", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/richmenu/validate");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.MessagingApiClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.validateRichMenuObject(
        // richMenuRequest: RichMenuRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
});
