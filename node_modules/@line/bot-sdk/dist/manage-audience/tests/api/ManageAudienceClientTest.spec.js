"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../api");
const node_http_1 = require("node:http");
const node_assert_1 = require("node:assert");
const pkg = require("../../../../package.json");
const channel_access_token = "test_channel_access_token";
describe("ManageAudienceClient", () => {
    it("activateAudienceGroupWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "PUT");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/{audienceGroupId}/activate".replace("{audienceGroupId}", "0"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.activateAudienceGroupWithHttpInfo(
        // audienceGroupId: number
        0);
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("activateAudienceGroup", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "PUT");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/{audienceGroupId}/activate".replace("{audienceGroupId}", "0"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.activateAudienceGroup(
        // audienceGroupId: number
        0);
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("addAudienceToAudienceGroupWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "PUT");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/upload");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.addAudienceToAudienceGroupWithHttpInfo(
        // addAudienceToAudienceGroupRequest: AddAudienceToAudienceGroupRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("addAudienceToAudienceGroup", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "PUT");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/upload");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.addAudienceToAudienceGroup(
        // addAudienceToAudienceGroupRequest: AddAudienceToAudienceGroupRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("createAudienceGroupWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/upload");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.createAudienceGroupWithHttpInfo(
        // createAudienceGroupRequest: CreateAudienceGroupRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("createAudienceGroup", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/upload");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.createAudienceGroup(
        // createAudienceGroupRequest: CreateAudienceGroupRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("createClickBasedAudienceGroupWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/click");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.createClickBasedAudienceGroupWithHttpInfo(
        // createClickBasedAudienceGroupRequest: CreateClickBasedAudienceGroupRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("createClickBasedAudienceGroup", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/click");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.createClickBasedAudienceGroup(
        // createClickBasedAudienceGroupRequest: CreateClickBasedAudienceGroupRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("createImpBasedAudienceGroupWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/imp");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.createImpBasedAudienceGroupWithHttpInfo(
        // createImpBasedAudienceGroupRequest: CreateImpBasedAudienceGroupRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("createImpBasedAudienceGroup", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/imp");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.createImpBasedAudienceGroup(
        // createImpBasedAudienceGroupRequest: CreateImpBasedAudienceGroupRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("deleteAudienceGroupWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "DELETE");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/{audienceGroupId}".replace("{audienceGroupId}", "0"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.deleteAudienceGroupWithHttpInfo(
        // audienceGroupId: number
        0);
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("deleteAudienceGroup", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "DELETE");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/{audienceGroupId}".replace("{audienceGroupId}", "0"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.deleteAudienceGroup(
        // audienceGroupId: number
        0);
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getAudienceDataWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/{audienceGroupId}".replace("{audienceGroupId}", "0"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getAudienceDataWithHttpInfo(
        // audienceGroupId: number
        0);
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getAudienceData", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/{audienceGroupId}".replace("{audienceGroupId}", "0"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getAudienceData(
        // audienceGroupId: number
        0);
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getAudienceGroupAuthorityLevelWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/authorityLevel");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getAudienceGroupAuthorityLevelWithHttpInfo();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getAudienceGroupAuthorityLevel", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/authorityLevel");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getAudienceGroupAuthorityLevel();
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getAudienceGroupsWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/list"
                .replace("{page}", "0") // number
                .replace("{description}", "DUMMY") // string
                .replace("{size}", "0"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("page"), String(
            // page: number
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("description"), String(
            // description: string
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("status"), String(
            // status: AudienceGroupStatus
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("size"), String(
            // size: number
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("includesExternalPublicGroups"), String(
            // includesExternalPublicGroups: boolean
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("createRoute"), String(
            // createRoute: AudienceGroupCreateRoute
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getAudienceGroupsWithHttpInfo(
        // page: number
        "DUMMY", // paramName=page(enum)
        // description: string
        "DUMMY", // paramName=description(enum)
        // status: AudienceGroupStatus
        "DUMMY", // paramName=status(enum)
        // size: number
        "DUMMY", // paramName=size(enum)
        // includesExternalPublicGroups: boolean
        "DUMMY", // paramName=includesExternalPublicGroups(enum)
        // createRoute: AudienceGroupCreateRoute
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getAudienceGroups", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/list"
                .replace("{page}", "0") // number
                .replace("{description}", "DUMMY") // string
                .replace("{size}", "0"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("page"), String(
            // page: number
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("description"), String(
            // description: string
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("status"), String(
            // status: AudienceGroupStatus
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("size"), String(
            // size: number
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("includesExternalPublicGroups"), String(
            // includesExternalPublicGroups: boolean
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("createRoute"), String(
            // createRoute: AudienceGroupCreateRoute
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getAudienceGroups(
        // page: number
        "DUMMY", // paramName=page(enum)
        // description: string
        "DUMMY", // paramName=description(enum)
        // status: AudienceGroupStatus
        "DUMMY", // paramName=status(enum)
        // size: number
        "DUMMY", // paramName=size(enum)
        // includesExternalPublicGroups: boolean
        "DUMMY", // paramName=includesExternalPublicGroups(enum)
        // createRoute: AudienceGroupCreateRoute
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("updateAudienceGroupAuthorityLevelWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "PUT");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/authorityLevel");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.updateAudienceGroupAuthorityLevelWithHttpInfo(
        // updateAudienceGroupAuthorityLevelRequest: UpdateAudienceGroupAuthorityLevelRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("updateAudienceGroupAuthorityLevel", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "PUT");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/authorityLevel");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.updateAudienceGroupAuthorityLevel(
        // updateAudienceGroupAuthorityLevelRequest: UpdateAudienceGroupAuthorityLevelRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("updateAudienceGroupDescriptionWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "PUT");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/{audienceGroupId}/updateDescription".replace("{audienceGroupId}", "0"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.updateAudienceGroupDescriptionWithHttpInfo(
        // audienceGroupId: number
        0, // paramName=audienceGroupId(number or int or long)
        // updateAudienceGroupDescriptionRequest: UpdateAudienceGroupDescriptionRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("updateAudienceGroupDescription", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "PUT");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/audienceGroup/{audienceGroupId}/updateDescription".replace("{audienceGroupId}", "0"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.ManageAudienceClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.updateAudienceGroupDescription(
        // audienceGroupId: number
        0, // paramName=audienceGroupId(number or int or long)
        // updateAudienceGroupDescriptionRequest: UpdateAudienceGroupDescriptionRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
});
