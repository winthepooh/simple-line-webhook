"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../api");
const node_http_1 = require("node:http");
const node_assert_1 = require("node:assert");
const pkg = require("../../../../package.json");
const channel_access_token = "test_channel_access_token";
describe("LineModuleClient", () => {
    it("acquireChatControlWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/chat/{chatId}/control/acquire".replace("{chatId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.LineModuleClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.acquireChatControlWithHttpInfo(
        // chatId: string
        "DUMMY", // chatId(string)
        // acquireChatControlRequest: AcquireChatControlRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("acquireChatControl", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/chat/{chatId}/control/acquire".replace("{chatId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.LineModuleClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.acquireChatControl(
        // chatId: string
        "DUMMY", // chatId(string)
        // acquireChatControlRequest: AcquireChatControlRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("detachModuleWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/channel/detach");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.LineModuleClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.detachModuleWithHttpInfo(
        // detachModuleRequest: DetachModuleRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("detachModule", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/channel/detach");
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.LineModuleClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.detachModule(
        // detachModuleRequest: DetachModuleRequest
        {});
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getModulesWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/list"
                .replace("{start}", "DUMMY") // string
                .replace("{limit}", "0"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("start"), String(
            // start: string
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("limit"), String(
            // limit: number
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.LineModuleClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getModulesWithHttpInfo(
        // start: string
        "DUMMY", // paramName=start(enum)
        // limit: number
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("getModules", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "GET");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/list"
                .replace("{start}", "DUMMY") // string
                .replace("{limit}", "0"));
            // Query parameters
            const queryParams = new URLSearchParams(reqUrl.search);
            (0, node_assert_1.equal)(queryParams.get("start"), String(
            // start: string
            "DUMMY"));
            (0, node_assert_1.equal)(queryParams.get("limit"), String(
            // limit: number
            "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.LineModuleClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.getModules(
        // start: string
        "DUMMY", // paramName=start(enum)
        // limit: number
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("releaseChatControlWithHttpInfo", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/chat/{chatId}/control/release".replace("{chatId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.LineModuleClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.releaseChatControlWithHttpInfo(
        // chatId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
    it("releaseChatControl", async () => {
        let requestCount = 0;
        const server = (0, node_http_1.createServer)((req, res) => {
            requestCount++;
            (0, node_assert_1.equal)(req.method, "POST");
            const reqUrl = new URL(req.url, "http://localhost/");
            (0, node_assert_1.equal)(reqUrl.pathname, "/v2/bot/chat/{chatId}/control/release".replace("{chatId}", "DUMMY"));
            (0, node_assert_1.equal)(req.headers["authorization"], `Bearer ${channel_access_token}`);
            (0, node_assert_1.equal)(req.headers["user-agent"], `${pkg.name}/${pkg.version}`);
            res.writeHead(200, { "Content-Type": "application/json" });
            res.end(JSON.stringify({}));
        });
        await new Promise(resolve => {
            server.listen(0);
            server.on("listening", resolve);
        });
        const serverAddress = server.address();
        if (typeof serverAddress === "string" || serverAddress === null) {
            throw new Error("Unexpected server address: " + serverAddress);
        }
        const client = new api_1.LineModuleClient({
            channelAccessToken: channel_access_token,
            baseURL: `http://localhost:${String(serverAddress.port)}/`,
        });
        const res = await client.releaseChatControl(
        // chatId: string
        "DUMMY");
        (0, node_assert_1.equal)(requestCount, 1);
        server.close();
    });
});
